generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model admin {
  id             String           @id @default(uuid())
  fullName       String
  userName       String           @unique
  password       String
  profilePic     Json?
  role           Int
  status         Int
  lastLogin      DateTime
  lastLoginIp    String
  email          String?          @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  gender         String           @default("0")
  blog           blog[]
  globalSettings globalSettings[]
  permissions    permissions[]
  category       category[]
  Product        product[]
  varient        varient[]
  combo          combo[]
  recipe         recipe[]
  coupons        coupons[]
}

model user {
  id               String   @id @default(uuid())
  firstName        String
  lastName         String
  email            String   @unique
  password         String?
  address          String?
  pinCode          Int?
  city             String?
  state            String?
  googleId         String?
  googleProfilePic String?
  mobile           String?
  status           Boolean  @default(true)
  otpMobile        String?
  otpEmail         String?
  role             Int      @default(3)
  emailVerified    Boolean  @default(false)
  mobileVerified   Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  cart cart[]
}

model globalSettings {
  id          String   @id @default(uuid())
  settingName String
  value       Int
  dependency  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  updatedBy   admin    @relation(fields: [adminId], references: [id])
  adminId     String
}

model blog {
  id             String   @id @default(uuid())
  title          String
  brief          String
  urlSlug        String   @unique
  content        String   @db.LongText
  thumbnailImage Json
  relatedImages  Json
  author         admin    @relation(fields: [adminId], references: [id])
  adminId        String
  status       Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model faqs {
  id       String @id @default(uuid())
  question String
  answer   String
  status   Int    @default(1)
}

model permissions {
  id                            String  @id @default(uuid())
  admin                         admin   @relation(fields: [adminId], references: [id], onDelete: Cascade)
  adminId                       String  @unique
  userUpdate                    Boolean @default(false)
  offersAndDiscounts            Boolean @default(false)
  productAndInventory           Boolean @default(false)
  complementaryContentManagment Boolean @default(false)
  globalSetting                 Boolean @default(false)
  siteManagement                Boolean @default(false)
}

model category {
  id           String     @id @default(uuid())
  categoryName String
  slug         String     @unique
  parentId     String?
  status       Int        @default(1)
  image        String
  showOnHome   Boolean
  parent       category?  @relation("CategoryParent", fields: [parentId], references: [id], onDelete: Cascade)
  children     category[] @relation("CategoryParent")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  createdBy    admin      @relation(fields: [creatorId], references: [id])
  creatorId    String
  product      product[]
}

model product {
  id           String    @id @default(uuid())
  tags         Json?
  stars        Int       @default(1) @db.UnsignedInt
  category     category  @relation(fields: [categoryId], references: [id], onDelete: Cascade) //
  categoryId   String
  name         String
  highLights   String
  description  String
  slug         String    @unique
  thumbNail    Json
  images       Json
  status       Boolean   @default(true)
  showOnHome   Boolean   @default(false)
  isFeatured   Boolean   @default(false)
  isBestSeller Boolean   @default(false)
  isVegiterian Boolean   @default(true)
  varient      varient[]
  recipe       recipe[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  createdBy    admin     @relation(fields: [adminId], references: [id])
  adminId      String
}

model varient {
  id                         String     @id @default(uuid())
  product                    product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  slug                       String     @unique
  productId                  String
  weight                     Decimal    @db.Decimal(10, 2)
  size                       String
  maxQuantityForFewAvailable Int        @default(10)
  qty                        Int        @db.UnsignedInt
  status                     Boolean    @default(true)
  isBulk                     Boolean    @default(false)
  discount                   Decimal    @default(0) @db.Decimal(10, 2)
  mrp                        Decimal    @db.Decimal(10, 2)
  wholeSalePrice             Decimal    @db.Decimal(10, 2)
  minQtyForBulkOrder         Int        @db.UnsignedInt
  isDefault                  Boolean    @default(false)
  createdBy                  admin      @relation(fields: [adminId], references: [id])
  adminId                    String
  combo                      combo[]
  cartItem                   cartItem[]
}

model combo {
  id                String  @id @default(uuid())
  name              String
  description       String
  discountInPercent Float
  status            Boolean @default(true)
  qty               Int     @default(0)

  productVarients varient[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  createdBy      admin            @relation(fields: [adminId], references: [id])
  adminId        String
  cartComboItems cartComboItems[]
}

model slider {
  id           String @id @default(uuid())
  pageSlug     String
  displayOrder Int
  images       Json
}

model banners {
  id           String @id @default(uuid())
  pageSlug     String
  displayOrder Int
  images       Json
}

model cart {
  id             String           @id @default(uuid())
  user           user             @relation(fields: [userId], references: [id])
  userId         String           @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  coupon         coupons?         @relation(fields: [couponId], references: [id], onDelete: Cascade)
  cartItem       cartItem[]
  couponId       String?
  cartComboItems cartComboItems[]
}

model cartItem {
  id        String   @id @default(uuid())
  cart      cart     @relation(fields: [cartId], references: [id])
  cartId    String
  varient   varient  @relation(fields: [varientId], references: [id], onDelete: Cascade)
  varientId String
  qty       Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model cartComboItems {
  id        String   @id @default(uuid())
  cart      cart     @relation(fields: [cartId], references: [id])
  cartId    String
  combo     combo    @relation(fields: [comboId], references: [id])
  qty       Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comboId   String
}

model recipe {
  id           String    @id @default(uuid())
  name         String
  ingredients  Json
  videoLink    String
  instructions String    @db.LongText
  status       Boolean @default(true)
  products     product[]
  createdBy    admin     @relation(fields: [adminId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  adminId      String
}

model coupons {
  id            String   @id @default(uuid())
  code          String   @unique
  type          String
  discountValue Float    @default(0)
  status        Boolean  @default(true)
  minOrderValue Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     admin    @relation(fields: [adminId], references: [id])
  adminId       String
  cart          cart[]
}

